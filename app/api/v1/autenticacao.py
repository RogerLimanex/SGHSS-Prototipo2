# D:\ProjectSGHSS\app\api\v1\autenticacao.py
from fastapi import APIRouter, Depends, HTTPException, status, Form, Response
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from typing import Optional
from datetime import timedelta
from pydantic import BaseModel

from app.db import get_db
from app import models as m
from app.core import security
from app.utils.logs import registrar_log

roteador = APIRouter()


# ----------------------------
# üìò Schema para Login
# ----------------------------
class LoginSchema(BaseModel):
    """Esquema Pydantic para valida√ß√£o de dados de login"""
    username: str
    password: str


# ----------------------------
# üîê Obter usu√°rio atual com email garantido
# ----------------------------
def obter_usuario_atual(
        current_user=Depends(security.get_current_user),
        db: Session = Depends(get_db)
):
    """
    üîê **Obter Usu√°rio Atual**

    Garante que o usu√°rio autenticado tenha o campo `email` dispon√≠vel.
    Caso o token JWT n√£o contenha o e-mail, ele √© recuperado do banco de dados.

    Retorna:
        dict: Dados do usu√°rio autenticado (com campo `email` garantido).
    """
    email = current_user.get("email")

    # Recupera o email do banco se n√£o estiver no token
    if not email:
        usuario = db.query(m.Usuario).filter(m.Usuario.id == int(current_user.get("id"))).first()
        if usuario:
            email = usuario.email
            current_user["email"] = email
    return current_user


# ----------------------------
# üîë Login - retorna JWT e grava cookie
# ----------------------------
@roteador.post("/login")
def login(
        response: Response,
        username: str = Form(..., description="Email do usu√°rio"),
        password: str = Form(..., description="Senha do usu√°rio"),
        db: Session = Depends(get_db)
):
    """
    üîë **Login de Usu√°rio**

    Autentica um usu√°rio com **email e senha**, gera um **token JWT** e grava um cookie HTTP-only
    contendo o token de acesso.

    Retorno:
    * `access_token`: Token de acesso JWT
    * `token_type`: Tipo de autentica√ß√£o
    * `id`, `email`, `papel`: Dados do usu√°rio autenticado
    """
    # Busca o usu√°rio pelo e-mail informado
    usuario = db.query(m.Usuario).filter(m.Usuario.email == username).first()

    # Valida√ß√µes b√°sicas
    if not usuario or not security.verify_password(password, usuario.hashed_password):
        raise HTTPException(status_code=401, detail="Email ou senha inv√°lidos")
    if not usuario.ativo:
        raise HTTPException(status_code=403, detail="Usu√°rio inativo")

    # Gera√ß√£o do token de acesso
    token_data = {
        "id": usuario.id,
        "email": usuario.email,
        "papel": usuario.papel.value if hasattr(usuario.papel, "value") else usuario.papel
    }
    access_token = security.create_access_token(token_data, expires_delta=timedelta(hours=1))

    # Cria√ß√£o da resposta JSON com o token
    response = JSONResponse(
        content={
            "message": "Login realizado com sucesso",
            "access_token": access_token,
            "token_type": "bearer",
            "id": usuario.id,
            "email": usuario.email,
            "papel": usuario.papel
        }
    )

    # Grava cookie seguro (n√£o acess√≠vel via JS)
    response.set_cookie(
        key="access_token",
        value=access_token,
        httponly=True,
        max_age=3600,
        samesite="lax",
        secure=False
    )

    # Registra o log de login
    registrar_log(
        db=db,
        usuario_email=usuario.email,
        tabela="usuarios",
        registro_id=usuario.id,
        acao="LOGIN",
        detalhes=f"Usu√°rio {usuario.email} realizou login"
    )

    return response


# ----------------------------
# üö™ Logout - remove cookie de autentica√ß√£o
# ----------------------------
@roteador.post("/logout")
def logout(response: Response):
    """
    üö™ **Logout de Usu√°rio**

    Remove o cookie `access_token` do navegador, encerrando a sess√£o atual.
    """
    response = JSONResponse(content={"message": "Logout realizado com sucesso"})
    response.delete_cookie("access_token")
    return response


# ----------------------------
# üßæ Registrar novo usu√°rio
# ----------------------------
@roteador.post("/register", status_code=status.HTTP_201_CREATED)
def registrar(
        email: str = Form(..., description="Email do novo usu√°rio"),
        password: str = Form(..., description="Senha do novo usu√°rio"),
        papel: Optional[str] = Form("PACIENTE", description="Papel do usu√°rio: PACIENTE, MEDICO ou ADMIN"),
        db: Session = Depends(get_db),
        current_user=Depends(obter_usuario_atual)
):
    """
    üßæ **Registrar Novo Usu√°rio**

    Cria um novo usu√°rio no sistema.
    - Usu√°rios **ADMIN** podem criar qualquer tipo (PACIENTE, M√âDICO, ADMIN).
    - Usu√°rios comuns s√≥ podem criar PACIENTES.

    Campos esperados:
    * `email`: Endere√ßo de e-mail √∫nico
    * `password`: Senha do usu√°rio
    * `papel`: Tipo de usu√°rio (PACIENTE, MEDICO, ADMIN)
    """
    # Impede duplicidade de email
    if db.query(m.Usuario).filter(m.Usuario.email == email).first():
        raise HTTPException(status_code=400, detail="Email j√° cadastrado")

    # Restringe cria√ß√£o de usu√°rios especiais
    if papel in ["MEDICO", "ADMIN"] and (not current_user or current_user.get("papel") != "ADMIN"):
        raise HTTPException(status_code=403, detail="Apenas ADMIN pode criar usu√°rios MEDICO ou ADMIN")

    # Define papel padr√£o caso inv√°lido
    if papel not in ["PACIENTE", "MEDICO", "ADMIN"]:
        papel = "PACIENTE"

    # Criptografa a senha e salva o novo usu√°rio
    hashed_password = security.hash_password(password)
    usuario = m.Usuario(email=email, hashed_password=hashed_password, papel=papel)

    db.add(usuario)
    db.commit()
    db.refresh(usuario)

    # Identifica quem criou o usu√°rio (ou "sistema" se autom√°tico)
    criador_email = "sistema"
    if current_user:
        criador = db.query(m.Usuario).filter(m.Usuario.id == int(current_user.get("id"))).first()
        criador_email = criador.email if criador else "sistema"

    # Log de cria√ß√£o
    registrar_log(
        db=db,
        usuario_email=criador_email,
        tabela="usuarios",
        registro_id=usuario.id,
        acao="CREATE",
        detalhes=f"Usu√°rio {usuario.email} criado com papel {papel}"
    )

    return {"id": usuario.id, "email": usuario.email, "papel": usuario.papel}


# ----------------------------
# üë• Listar todos os usu√°rios (somente ADMIN)
# ----------------------------
@roteador.get("/usuarios")
def listar_usuarios(
        current_user=Depends(obter_usuario_atual),
        db: Session = Depends(get_db)
):
    """
    üë• **Listar Todos os Usu√°rios**

    Exibe todos os usu√°rios cadastrados no sistema.

    **Acesso:** Somente ADMIN.

    Campos retornados:
    * `id`
    * `email`
    * `papel`
    * `ativo`
    * `criado_em`
    """
    if current_user.get("papel") != "ADMIN":
        raise HTTPException(status_code=403, detail="Acesso negado: apenas ADMIN")

    usuarios = db.query(m.Usuario).all()
    admin_email = current_user.get("email") or "desconhecido"

    # Registra log da leitura
    registrar_log(
        db=db,
        usuario_email=admin_email,
        tabela="usuarios",
        registro_id=None,
        acao="READ",
        detalhes=f"Usu√°rio {admin_email} listou todos os usu√°rios"
    )

    # Retorna a lista formatada
    return [
        {
            "id": u.id,
            "email": u.email,
            "papel": u.papel,
            "ativo": u.ativo,
            "criado_em": u.criado_em
        } for u in usuarios
    ]


# ----------------------------
# üôã‚Äç‚ôÇÔ∏è Dados do usu√°rio logado
# ----------------------------
@roteador.get("/me")
def obter_me(
        current_user=Depends(obter_usuario_atual),
        db: Session = Depends(get_db)
):
    """
    üôã‚Äç‚ôÇÔ∏è **Obter Dados do Usu√°rio Logado**

    Retorna os dados do usu√°rio atualmente autenticado.

    Campos retornados:
    * `id`
    * `email`
    * `papel`
    * `ativo`
    * `criado_em`
    """
    usuario = db.query(m.Usuario).filter(m.Usuario.id == int(current_user.get("id"))).first()

    if not usuario:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")

    # Loga o acesso do pr√≥prio usu√°rio √†s suas informa√ß√µes
    registrar_log(
        db=db,
        usuario_email=usuario.email,
        tabela="usuarios",
        registro_id=usuario.id,
        acao="READ",
        detalhes=f"Usu√°rio {usuario.email} acessou seus dados"
    )

    return {
        "id": usuario.id,
        "email": usuario.email,
        "papel": usuario.papel,
        "ativo": usuario.ativo,
        "criado_em": usuario.criado_em
    }
