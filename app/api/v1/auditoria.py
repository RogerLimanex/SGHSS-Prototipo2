from fastapi import APIRouter, Depends, HTTPException  # Importa funcionalidades do FastAPI
from sqlalchemy.orm import Session  # Importa sess√£o do SQLAlchemy para consultas
from app.db import get_db  # Fun√ß√£o para obter sess√£o do banco
from app.models.audit import AuditLog  # Modelo de logs de auditoria
from app.core import security  # Fun√ß√µes de seguran√ßa (ex: JWT, autentica√ß√£o)

roteador = APIRouter()  # Cria o roteador FastAPI para este m√≥dulo


# --------------------------
# Obter usu√°rio atual com email garantido
# --------------------------
def obter_usuario_atual(
        current_user=Depends(security.get_current_user),  # Recupera o usu√°rio do token JWT
        db: Session = Depends(get_db)  # Inje√ß√£o de depend√™ncia da sess√£o do banco
):
    """
    üîê **Obter Usu√°rio Atual**

    Garante que o usu√°rio autenticado tenha o campo `email` dispon√≠vel no token.
    Caso o token JWT n√£o contenha o e-mail, ele √© recuperado do banco de dados
    a partir do ID do usu√°rio.

    Retorna:
        dict: Dados do usu√°rio autenticado com o campo `email` garantido.
    """
    usuario_email = current_user.get("email")  # Tenta obter email do token

    # Caso o e-mail n√£o esteja presente no token JWT
    if not usuario_email:
        from app import models as m  # Importa modelos dinamicamente
        usuario = db.query(m.Usuario).filter(m.Usuario.id == int(current_user.get("id"))).first()

        # Se o usu√°rio for encontrado no banco, atualiza o e-mail no contexto atual
        if usuario:
            usuario_email = usuario.email
            current_user["email"] = usuario.email  # Atualiza email no objeto do usu√°rio

    return current_user  # Retorna dados do usu√°rio com email garantido


# --------------------------
# Listar logs de auditoria
# --------------------------
@roteador.get("/audit_logs", summary="Listar logs de auditoria", tags=["Auditoria"])
def listar_logs(
        usuario_atual=Depends(obter_usuario_atual),  # Obt√©m usu√°rio autenticado
        db: Session = Depends(get_db)  # Sess√£o do banco
):
    """
    üìã **Listar Logs de Auditoria**

    Retorna todos os registros de auditoria do sistema, exibindo detalhes
    sobre as a√ß√µes realizadas pelos usu√°rios.

    **Acesso:** Somente ADMIN.

    Campos retornados:
    * `id` ‚Üí Identificador do log
    * `usuario_email` ‚Üí Usu√°rio respons√°vel pela a√ß√£o
    * `tabela` ‚Üí Nome da tabela afetada
    * `registro_id` ‚Üí ID do registro alterado
    * `acao` ‚Üí Tipo de a√ß√£o (CREATE, READ, UPDATE, DELETE)
    * `detalhes` ‚Üí Descri√ß√£o da a√ß√£o executada
    * `data_hora` ‚Üí Data e hora da opera√ß√£o
    """
    # Verifica se o usu√°rio possui permiss√£o de administrador
    if usuario_atual.get("papel") != "ADMIN":
        raise HTTPException(status_code=403, detail="Acesso negado: apenas ADMIN")

    # Busca todos os registros de auditoria em ordem decrescente (mais recentes primeiro)
    logs = db.query(AuditLog).order_by(AuditLog.data_hora.desc()).all()

    # Retorna os dados formatados como lista de dicion√°rios
    return [
        {
            "id": log.id,
            "usuario_email": log.usuario_email,
            "tabela": log.tabela,
            "registro_id": log.registro_id,
            "acao": log.acao,
            "detalhes": log.detalhes,
            "data_hora": log.data_hora,
        }
        for log in logs
    ]
